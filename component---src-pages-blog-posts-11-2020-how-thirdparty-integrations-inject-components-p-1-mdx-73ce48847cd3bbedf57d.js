(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{kBq1:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));var s=n("zLVn"),a=(n("q1tI"),n("7ljp")),i=n("Tqsq"),o={},r={_frontmatter:o},c=i.a;function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)(c,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Ever wondered how chatbots and other pop up apps inject their components into your website. Usually what they do is they will ask you to add a script snippet to your website and the component pops up. In this post, I want to explain how I did manage to create a script that does this."),Object(a.b)("p",null,"Let's start with a script snippet that you can ask a user to put on their website. You don't want to ask them to add 100 lines of javascript code to their website. Instead what you can do is create a script that injects a javascript file served from your CDN, that can have 100 or more lines. This is what most of the small scripts that you add to your website do, they load more scripts. So let's start with a small javascript code that adds a new script to your DOM."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"var scriptElement = document.createElement('script');\nvar firstScriptElement = document.getElementsByTagName('script')[0];\nscriptElement.src = \"<https://yourcdn.com/script.js>\";\nscriptElement.async = 1;\nfirstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);\n")),Object(a.b)("p",null,"It is not a good idea to add this to your snippet instead what you can do is to create an ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Glossary/IIFE"}),"IIFE"),". These are functions that are executed immediately. And the good thing about this is the variables you declare in this function are only going to have function scope. So it won't cause any other issues if any other script uses the same variable names. Let's encapsulate this in an IIFE."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"( function() {\n    var scriptElement = document.createElement('script');\n    var firstScriptElement = document.getElementsByTagName('script')[0];\n    scriptElement.src = \"<https://yourcdn.com/script.js>\";\n    scriptElement.async = 1;\n    firstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);\n} )()\n")),Object(a.b)("p",null,"Let's make use of this newly created function to accept some useful parameters like tag name, script url, etc."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"( function(document, tagName, scriptAddress) {\n    var scriptElement = document.createElement(tagName)\n    var firstScriptElement = document.getElementsByTagName(tagName)[0];\n    scriptElement.src = scriptAddress;\n    scriptElement.async = 1;\n    firstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);\n} )(document, 'script', '<https://yourcdn.com/script.js>')\n")),Object(a.b)("p",null,"Since we have a script let's make the most out of it. Usually what most people do is add a global object which can hold some functionalities for our later use. Also, we will need something to figure out which webpage is calling this."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"( function(window, document, tagName, globalName, scriptAddress) {\n    window['MyAppObject'] = globalName;\n    var scriptElement = document.createElement(tagName)\n    var firstScriptElement = document.getElementsByTagName(tagName)[0];\n    scriptElement.src = scriptAddress;\n    scriptElement.async = 1;\n    firstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);\n} )(window, document, 'script', 'myapp', '<https://yourcdn.com/script.js>')\n")),Object(a.b)("p",null,"Let's consider we want to call an initialize function that starts rendering a chatbot. Now that we have a global object that can be called from anywhere we can use it to initialize our app like,"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"myapp('init', 'some_unique_id');\n")),Object(a.b)("p",null,"To do this we are going to create a queue that holds all these functions and arguments until our main script is loaded. Also, add an id to our script so that it is easy for us to later find it."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"( function(window, document, tagName, globalName, scriptAddress) {\n    window['MyAppObject'] = globalName;\n    window[globalName] = window[globalName] || function () {\n        (window[globalName].queue = window[globalName].queue || []).push(arguments);    \n    }\n    var scriptElement = document.createElement(tagName)\n    var firstScriptElement = document.getElementsByTagName(tagName)[0];\n    scriptElement.id = globalName;\n    scriptElement.src = scriptAddress;\n    scriptElement.async = 1;\n    firstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);\n} )(window, document, 'script', 'myapp', '<https://yourcdn.com/script.js>')\n\nmyapp('init', 'some_unique_id');\n")),Object(a.b)("p",null,"Hooray, now we have a queue at ",Object(a.b)("inlineCode",{parentName:"p"},"myapp.queue")," that can be later used in our function to do some initialization."),Object(a.b)("p",null,"Unfortunately, our script snippet got bigger and we don't want our users to copy this big script. Also, we don't want our users to understand what we are doing, I am kidding. So let's reduce the script size and mess it a little up. Why do we even need such long variable names? (Spoiler Alert)"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"((function (w, d, s, o, f) {\n  w['MyAppObject'] = o;\n  w[o] = w[o] || function () { (w[o].q = w[o].q || []).push(arguments) };\n    var js = d.createElement(s);\n  var fjs = d.getElementsByTagName(s)[0];\n  js.id = o;\n  js.src = f;\n  js.async = 1;\n  fjs.parentNode.insertBefore(js, fjs);\n}(window, document, 'script', 'myapp', '<https://yourcdn.com/script.js>'))\n\nmyapp('init', 'some_unique_id');\n")),Object(a.b)("p",null,"Let's make it smaller by removing those var declarations by getting them as functional parameters. Also reducing the lines."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"((function (w, d, s, o, f, js, fjs) {\n  w['MyAppObject'] = o; w[o] = w[o] || function () { (w[o].q = w[o].q || []).push(arguments) };\n    js = d.createElement(s), fjs = d.getElementsByTagName(s)[0];\n  js.id = o; js.src = f; js.async = 1; fjs.parentNode.insertBefore(js, fjs);\n}(window, document, 'script', 'myapp', '<https://yourcdn.com/script.js>'))\nmyapp('init', 'some_unique_id');\n")),Object(a.b)("p",null,"That's it for now. Now we have a script snippet that injects our main script to a webpage and also initializes it. In my next post, I will be explaining how you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"myapp.queue")," and inject an iframe into your user's website."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-posts-11-2020-how-thirdparty-integrations-inject-components-p-1-mdx-73ce48847cd3bbedf57d.js.map