{"version":3,"sources":["webpack:///./src/pages/blog/posts/05-2021/deploying-clojure-libraries-to-gitlab-maven-repository.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,ieACA,wDACA,6FACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,8BAIL,oEAAmD,0BAAYA,WAAW,KAAvB,eAAnD,2BAAsI,0BAAYA,WAAW,KAAvB,YAAtI,mEAA8P,0BAAYA,WAAW,KAAvB,eAA9P,UACA,gEACA,8JAA6I,+BAAGA,WAAW,KAAQ,CAC/J,KAAQ,wEADiI,iBAA7I,4DAEuF,0BAAYA,WAAW,KAAvB,yBAFvF,QAEiK,0BAAYA,WAAW,KAAvB,0BAFjK,gEAEoS,+BAAGA,WAAW,KAAQ,CACtT,KAAQ,qEADwR,iBAFpS,sHAKA,qGAAoF,0BAAYA,WAAW,KAAvB,eAApF,iHAA6P,0BAAYA,WAAW,KAAvB,iBAA7P,yFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,qyBAgBL,uEAAsD,0BAAYA,WAAW,KAAvB,iBAAtD,eAA+H,0BAAYA,WAAW,KAAvB,aAA/H,qDAA0O,0BAAYA,WAAW,KAAvB,YAA1O,gDACA,+CACA,mGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kBAIL,yIAAwH,0BAAYA,WAAW,KAAvB,oBAAxH,aAAkM,0BAAYA,WAAW,KAAvB,yBAAlM,wBACA,oDACA,+FAA8E,0BAAYA,WAAW,KAAvB,eAA9E,sMACA,qGAAoF,0BAAYA,WAAW,KAAvB,mBAApF,wFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,qhBASL,2GAKJJ,EAAWK,gBAAiB","file":"component---src-pages-blog-posts-05-2021-deploying-clojure-libraries-to-gitlab-maven-repository-mdx-5ca43064ec7c29a3a484.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/shaminmeerankutty/Personal/shamin.github.io/src/components/markdown/post.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Gitlab provides an amazing package manager which supports most types of the package registries like npm, pypi, maven, etc. You can use this to manage your clojure private packages. Gitlab have an amazing documentation but it doesn't provide any docs on how to deploy clojure packages. We are going to look how to deploy a simple clojure package to gitlab private repository. We will be using leiningen for creating, managing and deploying clojure projects.`}</p>\n    <h2>{`Creating a new clojure library`}</h2>\n    <p>{`leiningen provides an easy way to create a clojure library project. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`lein new <library-name>\n`}</code></pre>\n    <p>{`This create a simple clojure library with a `}<inlineCode parentName=\"p\">{`project.clj`}</inlineCode>{` configuration file and `}<inlineCode parentName=\"p\">{`core.clj`}</inlineCode>{` file. Update the description, url etc. for the package in your `}<inlineCode parentName=\"p\">{`project.clj`}</inlineCode>{` file.`}</p>\n    <h2>{`Setting up gitlab deploy configuration`}</h2>\n    <p>{`To deploy the package for your terminal you will need a gitlab personal or deploy token. You can generate a personal token using this `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\"\n      }}>{`documentation`}</a>{`. If you are going with a deploy token make sure it have `}<inlineCode parentName=\"p\">{`read_package_registry`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`write_package_registry`}</inlineCode>{` scopes attached to it. To generate deploy token follow this `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.gitlab.com/ee/user/project/deploy_tokens/index.html\"\n      }}>{`documentation`}</a>{`. Another thing you will need is the project id. You can get it from the repository home page below the repo name.`}</p>\n    <p>{`Once you have a gitlab personal or deploy token you have to set this to your `}<inlineCode parentName=\"p\">{`project.clj`}</inlineCode>{` file. leiningen provides a way to set package deploy configuration for each of the release type. You can add `}<inlineCode parentName=\"p\">{`:repositories`}</inlineCode>{` key in project.clj with the config values. So your project.clj will look like this. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(defproject my-package \"0.1.0-SNAPSHOT\"\n  :description \"<description>\"\n  :url \"<repo_url>\"\n  :license {:name \"EPL-2.0\"\n            :url \"https://www.eclipse.org/legal/epl-2.0/\"}\n  :dependencies [[org.clojure/clojure \"1.10.0\"]]\n  :repl-options {:init-ns my-package.core}\n  :repositories [[\"releases\"  {:url           \"https://gitlab.com/api/v4/projects/<project-id>/packages/maven\"\n                               :username      \"Private-Token\"\n                               :password      \"<personal | deploy token>\"}\n                                    \"snapshots\" {:url           \"https://gitlab.com/api/v4/projects/<project-id>/packages/maven\"\n                               :username      \"Private-Token\"\n                               :password      \"<personal | deploy token>\"}]])\n`}</code></pre>\n    <p>{`You will need to add two configurations to the `}<inlineCode parentName=\"p\">{`:repositories`}</inlineCode>{` field. The `}<inlineCode parentName=\"p\">{`snapshots`}</inlineCode>{` config will be used for snapshot release and the `}<inlineCode parentName=\"p\">{`releases`}</inlineCode>{` config will be used for the major releases.`}</p>\n    <h2>{`Deploying the package`}</h2>\n    <p>{`It is time to deploy your package to gitlab. Run the lein deploy command. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`lein deploy\n`}</code></pre>\n    <p>{`This will deploy the packages to gitlab package registry. You can see it by going to the repo page and selecting `}<inlineCode parentName=\"p\">{`Package Registry`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`Packages & Registries`}</inlineCode>{` tab in the sidebar.`}</p>\n    <h2>{`Securing the deploy tokens`}</h2>\n    <p>{`In the last step we have hardcoded the personal or deploy token in the `}<inlineCode parentName=\"p\">{`project.clj`}</inlineCode>{` but for an actual project it is not secure to hardcode some credentials in a file we add to git. To secure it we can set an environment variable with the token and load that in our project.clj.`}</p>\n    <p>{`To pull the token from an environment variable to the project.clj we can use `}<inlineCode parentName=\"p\">{`(System/getenv)`}</inlineCode>{` function. By replacing the token with this function, the project.clj will look like`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`:repositories [[\"releases\"  {:url           \"https://gitlab.com/api/v4/projects/<project-id>/packages/maven\"\n                             :username      \"Private-Token\"\n                             :password      ~(System/getenv \"GITLAB_DEPLOY_TOKEN\")}\n                              \"snapshots\" {:url           \"https://gitlab.com/api/v4/projects/<project-id>/packages/maven\"\n                             :username      \"Private-Token\"\n                             :password      ~(System/getenv \"GITLAB_DEPLOY_TOKEN\")}]]\n`}</code></pre>\n    <p>{`Now we have a clojure package deployed to gitlab package registry. Happy Coding! `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}